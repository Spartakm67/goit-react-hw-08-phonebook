{"version":3,"file":"static/js/609.dbab8e92.chunk.js","mappings":"6NAEaA,EAAYC,EAAAA,EAAAA,IAAH,sNAWTC,EAAUD,EAAAA,EAAAA,EAAH,qF,GAMSA,EAAAA,EAAAA,OAAH,kO,SCfpBE,GAAOF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,yJASJI,EAAYJ,EAAAA,EAAAA,MAAH,2EAMTK,GAAeL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,qCAIZO,EAAaP,EAAAA,EAAAA,OAAH,mN,6BCvBHQ,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EACpBC,EAAgB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EACrBC,EAAc,SAAAP,GAAK,OAAIA,EAAMC,SAASO,KAAnB,E,6BCK1BC,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHAJE,0IAOHC,SAAS,gCAEZC,OAAQP,EAAAA,KACLK,QAAQ,6EADH,gGAELC,SAAS,0CAIDE,EAAe,WAE1B,IAKIC,GAAWC,EAAAA,EAAAA,MACXnB,GAAWoB,EAAAA,EAAAA,IAAYtB,GACvBS,GAAQa,EAAAA,EAAAA,IAAYd,GAyBxB,OAJEC,GACAc,IAAAA,OAAAA,QAAA,UAA2Bd,EAA3B,+BAIA,SAAC,KAAD,CACEe,cAlCiB,CACrBX,KAAM,GACNK,OAAQ,IAiCJO,iBAAkBf,EAClBgB,SA3BJ,SAAsBC,EAAtB,GAA8C,IAAdC,EAAa,EAAbA,UAQ9B,GANAC,QAAQC,IAAI,SAEG5B,EAAS6B,MACtB,SAAAC,GAAO,OAAIA,EAAQnB,KAAKoB,gBAAkBN,EAAOd,KAAKoB,aAA/C,IAMP,OAFAV,IAAAA,OAAAA,KAAA,gBAA8BI,EAAOd,KAArC,mCACAe,IAGAC,QAAQC,IAAIH,GACZP,GAASc,EAAAA,EAAAA,IAAWP,IACpBC,GAEH,EAOC,UAKE,UAAClC,EAAD,YACE,UAACE,EAAD,mBAEE,SAAC,KAAD,CAAOuC,KAAK,OAAOtB,KAAK,UACxB,SAAChB,EAAD,CAAcgB,KAAK,OAAOuB,UAAU,YAGtC,UAACxC,EAAD,qBAEE,SAAC,KAAD,CAAOuC,KAAK,MAAMtB,KAAK,YACvB,SAAChB,EAAD,CAAcgB,KAAK,SAASuB,UAAU,YAGxC,SAACrC,EAAD,CAAYoC,KAAK,SAAjB,6BAIP,EAEDZ,IAAAA,OAAAA,KAAqB,CACnBc,SAAU,YACVC,MAAO,QACPC,SAAU,OACVC,QAAS,EACTC,KAAK,EACLC,QAAS,OCvFX,I,EAAMC,EAAenD,EAAAA,EAAAA,GAAH,8HAQZoD,EAAiBpD,EAAAA,EAAAA,OAAH,mO,UCCPqD,EAAmB,WAE9B,IAAMzB,GAAWC,EAAAA,EAAAA,MACXZ,GAAQa,EAAAA,EAAAA,IAAYd,GACpBN,GAAWoB,EAAAA,EAAAA,IAAYtB,GACvBK,GAASiB,EAAAA,EAAAA,IAAYlB,GAErB0C,EAAmB5C,EAASG,QAAO,SAAA2B,GAAO,OAC9CA,EAAQnB,KAAKoB,cAAcc,SAAS1C,EAAO4B,cADG,IAYhD,OARAe,EAAAA,EAAAA,YAAU,WACR5B,GAAS6B,EAAAA,EAAAA,MACV,GAAE,CAAC7B,IAEAX,GACFc,IAAAA,OAAAA,QAAA,UAA2Bd,EAA3B,+BAIA,wBACGqC,EAAiBI,KAAI,SAAAlB,GAAO,OAC3B,UAACW,EAAD,YACE,4BACG,IACAX,EAAQnB,KAFX,MAEoBmB,EAAQd,OAAQ,QAEpC,SAAC0B,EAAD,CACEO,QAAS,WACL/B,GAASgC,EAAAA,EAAAA,IAAcpB,EAAQqB,IAChC,EAHL,sBALiBrB,EAAQqB,GADA,KAiBlC,EAED9B,IAAAA,OAAAA,KAAqB,CACnBc,SAAU,YACVC,MAAO,QACPC,SAAU,OACVC,QAAS,EACTC,KAAK,EACLC,QAAS,OCvDJ,IAAMY,EAAa9D,EAAAA,EAAAA,IAAH,6H,UCIV+D,EAAS,WACpB,IAAMnC,GAAWC,EAAAA,EAAAA,MACXhB,GAASiB,EAAAA,EAAAA,IAAYlB,GAG3B,OACE,UAACkD,EAAD,YACE,mDACA,kBAAOnB,KAAK,OACVqB,MAAOnD,EACPoD,SAPoB,SAAAC,GAAK,OAAItC,GAASuC,EAAAA,EAAAA,GAAUD,EAAME,cAAcJ,OAA3C,MAUhC,ECgBDjC,IAAAA,OAAAA,KAAqB,CACnBc,SAAU,YACVC,MAAO,QACPC,SAAU,OACVC,QAAS,EACTC,KAAK,EACLC,QAAS,MAGX,MAnCiB,WAEjB,IAAMxC,GAAWoB,EAAAA,EAAAA,IAAYtB,GACvB6D,GAAUvC,EAAAA,EAAAA,IAAYhB,GACtBG,GAAQa,EAAAA,EAAAA,IAAYd,GAMxB,OAJIC,GACFc,IAAAA,OAAAA,QAAA,kCAAmDd,EAAnD,OAIA,UAAClB,EAAD,YACE,uCACA,SAAC4B,EAAD,KACA,qCACC0C,IAAW,kDACZ,SAACN,EAAD,KACA,SAACV,EAAD,IACC3C,EAAS4D,OAAS,GAClB,SAACrE,EAAD,4DAEC,SAACA,EAAD,oCAGP,C","sources":["components/App.styled.jsx","components/ContactsForm/ContactsForm.styled.jsx","redux/selectors.js","components/ContactsForm/ContactsForm.js","components/ContactsFormList/ContactsFormList.styled.jsx","components/ContactsFormList/ContactsFormList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n    padding: 50px;   \n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    justify-content: center;\n    align-items: center;\n    font-size: 20px;\n    color: #8b00ff;\n   `;\n\nexport const IfEmpty = styled.p`\n   color: green;\n   font-size: 25px;\n   font-weight: 500;\n`;\n\nexport const DefaultButton = styled.button`\n  width: 150px;\n  border-radius: 4px;\n  font-size: 14px;\n  padding: 2px 0;\n  border: 1px solid gray;\n    &:hover {\n    background-color: #bbe4e9;\n    font-weight: 700;\n    color: #f95959;\n  }\n`;","import styled from '@emotion/styled'\n\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nconst Form = styled(FormikForm)`\ndisplay: flex;\ngap:20px;\nflex-direction: column;\nwidth: 450px;\npadding: 10px;\nborder: 1px solid black;\nborder-radius:4px;\n`;\nconst FormField = styled.label`\ngap:4px;\ndisplay: flex;\nflex-direction: column;\n`;\n\nconst ErrorMessage = styled(FormikError)`\ncolor: red;\n`;\n\nconst FormButton = styled.button`\n\n  border-radius: 4px;\n  font-size: 14px;\n  padding: 2px 0;\n  border: 1px solid gray;\n    &:hover {\n    background-color: #bbe4e9;\n    font-weight: 700;\n    color: #f95959;\n  }\n`;\n\n\nexport { Form, FormField, ErrorMessage, FormButton  };","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n","import { Formik, Field } from 'formik';\nimport { Form, FormField, ErrorMessage, FormButton } from './ContactsForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations'; \nimport { selectContacts, selectError } from 'redux/selectors';\nimport Notiflix from 'notiflix';\n\nconst phoneSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      `Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`\n    )\n    .required('Required, please Add Name!!!'),\n\n  number: Yup.string()\n    .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,`Phone number must be digits and can contain spaces, dashes, parentheses and can start with +`)\n    .required('Required, please Add Phone Number!!!'),\n});\n\n\nexport const ContactsForm = () => {\n\n  const initialValue = {\n  name: '',\n  number: '',\n  };\n  \nconst dispatch = useDispatch();\nconst contacts = useSelector(selectContacts);\nconst error = useSelector(selectError);  \n  \n  function handleSubmit(values, { resetForm }) {\n\n    console.log(\"Hello\");\n    \n    const isName = contacts.some(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isName) {\n      Notiflix.Notify.info(`Hey, \"${values.name}\" is already in contacts!`);\n      resetForm();\n      return;\n    } else {\n      console.log(values);\n      dispatch(addContact(values));\n      resetForm();\n    }\n  }\n  \nif (error) {\n    Notiflix.Notify.failure(`${error} Reload the page, please.`);\n  }\n\n  return (\n    <Formik\n      initialValues={initialValue}\n      validationSchema={phoneSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n\n        <FormField>\n          Number\n          <Field type=\"tel\" name=\"number\"/>\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </Form>\n    </Formik>\n  );\n};\n\nNotiflix.Notify.init({\n  position: 'right-top',\n  width: '400px',\n  distance: '10px',\n  opacity: 1,\n  rtl: false,\n  timeout: 1500,\n});","import styled from '@emotion/styled'\n\nconst ContactsList = styled.li`\npadding-bottom: 10px;\n//  display: flex;\nalign-items: center;\ntext-content: center:\n gap: 15px;\n `;\n\nconst FeedbackButton = styled.button`\n  \nwidth: 60px;\n  border-radius: 4px;\n  font-size: 14px;\n  padding: 2px 0;\n  border: 1px solid gray;\n    &:hover {\n    background-color: #bbe4e9;\n    font-weight: 700;\n    color: #f95959;\n  }\n`;\n\nexport { ContactsList, FeedbackButton };\n","import { ContactsList, FeedbackButton } from './ContactsFormList.styled'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport {\n  selectContacts,\n  selectFilter,\n  selectError,\n} from 'redux/selectors';\nimport { useEffect } from 'react';\nimport Notiflix from 'notiflix';\n\nexport const ContactsFormList = () => {\n\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  if (error) {\n    Notiflix.Notify.failure(`${error} Reload the page, please.`);\n  }\n\n  return (\n    <ul>\n      {filteredContacts.map(contact => (\n        <ContactsList key={contact.id}>\n          <span>\n            {' '}\n            {contact.name} : {contact.number}{' '}\n          </span>\n          <FeedbackButton\n            onClick={() => {\n                dispatch(deleteContact(contact.id));\n              }}\n          >\n            Delete\n          </FeedbackButton>\n        </ContactsList>\n      ))}\n    </ul>\n  );\n};\n\nNotiflix.Notify.init({\n  position: 'right-top',\n  width: '400px',\n  distance: '10px',\n  opacity: 1,\n  rtl: false,\n  timeout: 1500,\n});","import styled from '@emotion/styled'\n\nexport const FilterList = styled.div`\ndisplay: flex;\ngap: 10px;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n`;\n\n","import { FilterList } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors'; \n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const changeFilterValue = event => dispatch(setFilter(event.currentTarget.value));\n\n  return (\n    <FilterList>\n      <h3>Find contacts by name</h3>\n      <input type=\"text\"\n        value={filter}\n        onChange={changeFilterValue} ></input>\n    </FilterList>\n  );\n};\n\n","import { Container, IfEmpty } from \"components/App.styled\"; \nimport { ContactsForm } from \"components/ContactsForm/ContactsForm\";\nimport { ContactsFormList } from \"components/ContactsFormList/ContactsFormList\"; \nimport { Filter } from \"components/Filter/Filter\"; \nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectLoading, selectError } from 'redux/selectors';\n\nimport Notiflix from 'notiflix';\n\nconst Contacts = () => {\n\nconst contacts = useSelector(selectContacts);\nconst loading = useSelector(selectLoading);\nconst error = useSelector(selectError);\n  \n  if (error) {\n    Notiflix.Notify.failure(`Please reload the page. ${error} `);\n  }\n  \n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n      {loading && <div>Loading contacts...</div>}\n      <Filter />\n      <ContactsFormList />\n      {contacts.length > 0 ? (\n       <IfEmpty> All Contacts have been succesfully uploaded</IfEmpty>\n      ) : (\n        <IfEmpty> Phonebook is empty</IfEmpty>      \n      )}       \n    </Container>);\n};\n\nNotiflix.Notify.init({\n  position: 'right-top',\n  width: '400px',\n  distance: '10px',\n  opacity: 1,\n  rtl: false,\n  timeout: 2000,\n});\n\nexport default Contacts;"],"names":["Container","styled","IfEmpty","Form","FormikForm","FormField","ErrorMessage","FormikError","FormButton","selectContacts","state","contacts","items","selectFilter","filter","selectLoading","isLoading","selectError","error","phoneSchema","Yup","shape","name","min","max","matches","required","number","ContactsForm","dispatch","useDispatch","useSelector","Notiflix","initialValues","validationSchema","onSubmit","values","resetForm","console","log","some","contact","toLowerCase","addContact","type","component","position","width","distance","opacity","rtl","timeout","ContactsList","FeedbackButton","ContactsFormList","filteredContacts","includes","useEffect","fetchContacts","map","onClick","deleteContact","id","FilterList","Filter","value","onChange","event","setFilter","currentTarget","loading","length"],"sourceRoot":""}